#!/usr/bin/env python
# Simple pattern setup for screens
# Then easly switch between then. For more information see github.com/h0m3/fixscr
#
# Copyright (C) 2017  Artur 'h0m3' Paiva
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Feel free to contact me at dr.hoome@gmail.com.
#

try:
    from subprocess import check_call, check_output, CalledProcessError, STDOUT
    from sys import argv
    from os import getenv
    from os.path import isfile
    from configparser import ConfigParser
    from time import sleep
except ImportError:
    print("fixscr: Missing Python 'core' Libraries.")
    print("See more at https://github.com/h0m3/fixscr/wiki/Installation")
    quit(1)


DEVNULL = open("/dev/null", 'w')


# Check if xrandr is installede
def check_xrandr():
    try:
        check_call(["xrandr"], stdout=DEVNULL, stderr=DEVNULL)
        return True
    except (CalledProcessError, FileNotFoundError):
        return False


# Check if screen is connected
def is_connected(screen):
    xrandr = check_output(["xrandr"])
    for line in xrandr.decode().splitlines():
        if screen in line:
            return not("disconnected" in line)


# Set xrandr mode for a Screen
def set_xrandr(screen, mode, brightness=1, refresh=60, primary=False, pos="0x0"):
    cmd = [
        "xrandr",
        "--output", screen,
        "--mode", mode,
        "--refresh", str(refresh),
        "--brightness", str(brightness),
        "--pos", str(pos)]
    if primary:
        cmd.extend(["--primary", "--preferred"])
    try:
        check_call(cmd)
        return True
    except CalledProcessError:
        return False


# Power off a screen
def power_off(screen):
    cmd = ["xrandr", "--output", screen, "--off"]
    try:
        check_call(cmd)
        return True
    except CalledProcessError:
        return False


# Set a pattern saved in config
def set_pattern(config, pattern):
    config = config[pattern]
    primary = config["primary"].replace(" ", "")
    screen = config["screen"].replace(" ", "").split(",")
    status = config["status"].replace(" ", "").split(",")
    mode = config["mode"].replace(" ", "").split(",")
    brightness = config["brightness"].replace(" ", "").split(",")
    refresh = config["refresh"].replace(" ", "").split(",")
    pos = config["pos"].replace(" ", "").split(",")
    connected = config.getboolean("connected", fallback=True)

    c = 0

    def get_item(value, scr, c):
        if len(value) < len(scr):
            return value[0]
        else:
            return value[c]

    if connected:
        for i in screen:
            if not(is_connected(i)):
                return False

    while c < len(screen):
        scr = screen[c]
        stat = get_item(status, screen, c)
        mod = get_item(mode, screen, c)
        bht = get_item(brightness, screen, c)
        rfh = get_item(refresh, screen, c)
        ps = get_item(pos, screen, c)
        c += 1
        if stat == "on":
            prim = scr == primary
            if is_connected(scr) and not(set_xrandr(scr, mod, bht, rfh, prim, ps)):
                return False
        else:
            if is_connected(scr) and not(power_off(scr)):
                return False

    return True


# Show help
def show_help(config_file):
    print("Usage: %s [option] or [pattern]\n" % argv[0])
    print("fixscr: Simple pattern setup for screens")
    print("If no option is given, set to 'DEFAULT' pattern")
    print("You can define patterns at %s" % config_file)
    print("See https://github.com/h0m3/fixscr/wiki/Configuration\n")
    print("Valid options:")
    print("\tlist \tList all avaliable patterns at %s" % config_file)
    print("\tshow \tShow current screen setup and available settings")
    print("\thelp \tShow this help")
    print("\nExit Status:")
    print("\t0 Exit OK")
    print("\t1 Missing fixscr dependency")
    print("\t2 Failed to set some pattern")
    print("\t3 Pattern/Option not found or config file missing")
    print("\n\nfixscr Copyright (C) 2017  Artur 'h0m3' Paiva")
    print("This program comes with ABSOLUTELY NO WARRANTY; for details see LICENSE file.")
    print("This is free software, and you are welcome to redistribute it")
    print("under certain conditions; see LICENSE file for details.")
    quit(0)


# Main Section
if __name__ == "__main__":
    if not check_xrandr():
        print("fixscr: 'xrandr' not found, please make sure that you have 'xrandr' and its listed in your $PATH.")
        print("See more at https://github.com/h0m3/fixscr/wiki/Installation")
        quit(1)

    config = ConfigParser()
    config_file = getenv("HOME")+"/.fixscr"

    if not isfile(config_file):
        print("fixscr: Missing config file %s, please make sure that the config file exists and its correctly set up.")
        print("See more at https://github.com/h0m3/fixscr/wiki/Configuration")
        quit(3)

    config.read(config_file)

    if len(argv) > 1:
        if argv[1] == "list":
            print("List of Patterns in %s:" % config_file)
            for i in config.sections():
                print("\t%s" % i)
        elif argv[1] == "show":
            check_call(["xrandr"])
        elif argv[1] == "help":
            show_help(config_file)
        elif argv[1] in config.sections():
            set_pattern(config, argv[1])
            sleep(0.5)
            set_pattern(config, argv[1])
        else:
            print("fixscr: '%s' pattern not found!" % argv[1])
            print("Try %s help for more information." % argv[0])
            quit(3)
    else:
        if not(set_pattern(config, "DEFAULT")):
            print("fixscr: failed to set pattern")
            quit(2)
        else:
            sleep(0.5)
            set_pattern(config, "DEFAULT")
